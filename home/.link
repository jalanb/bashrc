#! /bin/bash
#
# Link this project into home
#
# This script must be in a git repo
# Link this script's directory into $HOME
#     for example, if repo was cloned to ~/src/git/hub/repo then
#         cd $HOME; ln -s ~/src/git/hub/repo .
#     Todo: option to use repo name instead of directory name
#
# Link a list of known config files and dirs, mostly to dot (hidden) links
#     hence the name of this file
# TODO: Generalise (currently based on layout of this repo)
#
# See also https://github.com/jalanb/jab/commit/6e2e26b455b78a7da51a5e977d7f3fa3c098ddec

vim_clone_to_home () {
    source="$clone_link"/$1
    destination="$HOME"/$2
    test -f "$destination" && vim -d "$source" "$destination"
    link_clone_to_home "$@"
}

link_clone_to_home () {
    link_into_home "$clone_link"/$1 $2
}

link_into_home () {
    source="$1"
    destination="$HOME"/$2
    [[ -e "$destination" || -L "$destination" ]] && rm -rf "$destination"
    ln -s "$source" "$destination"
}

back_into_home () {
    local _path="$HOME"/$1
    local _file=
    if [[ -f "$_path" ]]; then
        _file="$_path"
    elif [[ -d "$_path" ]]; then
        _file="$_path/$clone_name.bak"
    fi
    echo "#" >> "$_file"
    echo "# $BASH_SOURCE was here" >> "$_file"
    local _backup="$_path.$clone_name.bak"
    cp -r "$_path" "$backup"
    link_clone_to_home "$@"
}

links_into_home () {
    cd $HOME
    vim_clone_to_home home/gitconfig             .gitconfig
    vim_clone_to_home home/gitignore_global      .gitignore_global
    vim_clone_to_home home/bashprofile           .bash_profile
    vim_clone_to_home home/bashrc                .bashrc
    vim_clone_to_home home/vimrc                 .vimrc
    link_clone_to_home home/ackrc                .ackrc
    link_clone_to_home home/editrc               .editrc
    link_clone_to_home home/inputrc              .inputrc
    link_clone_to_home home/sackrc               .sackrc
    link_clone_to_home home/tmuxrc               .tmux.conf
    link_clone_to_home home/xonshrc              .xonshrc
    link_clone_to_home home/gvimrc               .gvimrc
    link_clone_to_home home/dir_colors           .dir_colors
    link_clone_to_home home/vim                  .vim

    link_into_home ~/src/git/hub        hub
    link_into_home ~/jab/src/bash       bash
    link_into_home ~/bash/keyboard      keys

    vim_clone_to_home home/pythonrc.py           .pythonrc.py
    link_clone_to_home home/ipython              .ipython
    link_into_home ~/jab/src/python     python
}

renew_clone_link () {
    local script_file=$(readlink -f $BASH_SOURCE)
    local script_dir=$(dirname $script_file)
    local script_parent=$(readlink -f $script_dir/..)
    local clone_dir=
    local sub_dir=
    if [[ -d $script_parent/.git ]]; then
        clone_dir=$script_parent
        sub_dir=$(basename $script_dir)
    elif [[ -d $script_dir/.git ]]; then
        clone_dir=$script_dir
    else
        echo $script_file assumes it is in a git clone
        echo $script_parent/.git is not a directory
        echo $script_dir/.git is not a directory
        return 2
    fi

    # clone_dir == ~/.../jab
          clone_link=~/$(basename $clone_dir)       # ~/jab
    local script_name=$(basename $script_file)      # .link
    local linked_script=$clone_link/$sub_dir/$script_name    # ~/jab/home/.link
    [[ -f $linked_script ]] && return 0
    [[ -f $clone_link ]] && rm -f $clone_link
    [[ -h $clone_link ]] && rm -f $clone_link
    [[ -d $clone_link ]] && mv $clone_link ${clone_link}~
    ln -s $clone_dir $clone_link
    if [[ ! -f $linked_script ]]; then
        echo $linked_script is not a file >&2
        return 1
    fi
    return 0
}

renew_clone_link && links_into_home

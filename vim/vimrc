" vim:fdm=marker

scriptencoding 'utf-8'
" Keyboard {{{1
" function keys {{{2
nnoremap <F1>      :help<cr>
nnoremap <F2>      :ls<CR>:b<Space>
nnoremap <F3>      :map <F3>
inoremap <F3>      <esc>:w!<CR>
nnoremap <F4>      <c-w>w
nnoremap <F5>      :map <F6>
nnoremap <F6>      WQ
nnoremap <F7>      :set list!<CR>
nnoremap <F8>      O<esc>:w!<CR>:Limelight<cr>
nnoremap <F9>      :w!<CR>:Limelight<cr>
nnoremap <F9>      :map <F9>
inoremap <F9>      <esc>:w!<CR>
nnoremap <F10>      :map <F10>
nnoremap <F10>      k\mdndnddn.
nnoremap <F11>      :map <F11>
nnoremap <F12>      :map <F12>

" modifier keys {{{2
nnoremap <S-F4>     <C-W>p
nnoremap <C-F4>     <C-W>c
nnoremap <S-F5>     <C-W>=


" ordinary keys {{{2
" number row {{{3
"noremap <bs>
"noremap =
"noremap -
"noremap
"noremap 9
"noremap 8
"noremap 7
"noremap 6
"noremap 5
"noremap 4
"noremap 3
"noremap 2
"noremap 1
inoremap Â§ <esc>
nnoremap Â§ :q!<cr>
" shifted number row {{{3
"noremap <S-bs> doesn't work
nnoremap + zM/^\(def \zs\|\zs[^ ]\)[a-zA-Z0-9_]*<cr>jzO
nnoremap _ zM?^\(def \zs\|\zs[^ ]\)[a-zA-Z0-9_]*<cr>jzO
nnoremap ) %
"noremap (
"noremap *
nnoremap & J
"nnoremap ^
"noremap % goto matching bracket
"noremap $ goto EOL
nnoremap Â£ :nnoremap Â£
"noremap @ execute contents of register
"noremap ! shell
inoremap Â± <esc>:qa!<cr>
nnoremap Â± :qa!<cr>
nnoremap !! :noremap @@
nnoremap Â£Â£ :noremap @@<up>
"noremap Â±
" letters {{{3
"a-y {{{4
" /map \zs[a-yA-Y]\([<][^ ]*\|[^ ]\)
"noremap a - append
"noremap b - backword
"noremap c - start cutting
"noremap d - delete
"noremap e - to end of word
"noremap f - to next char
"noremap g - many actions
"noremap h - go left
"noremap h :call AfterPressing("h")<CR>
"noremap i - insert
nnoremap j jzz
nnoremap k kzz
"noremap l - go right
"noremap l :call AfterPressing("l")<CR>
"noremap m - set mark
nnoremap nb ?<cr>zvzz
nnoremap nm /<cr>zvzz
nnoremap nn nzvzz
nnoremap n<down> /<cr>
nnoremap n<up> ?<cr>
"noremap o - open new line
"noremap p - paste
nnoremap q :q<cr>
"noremap r - change one char
"noremap s - start replacing
"noremap t* - see also ftplugin/python/jab.vim, t* is test related for python
noremap tf :tabnew ~/tmp/fred.txt
noremap tn :tabnew<Space>
nnoremap tq <esc>;iq<CR>
nnoremap ttq <esc>;iqa!<CR>
nnoremap tw <esc>;iwa!<CR>qa!<CR>
nnoremap tz :! /Users/jab/src/git/hub/jab/bin/Digging "Thumber Tarzan Climber"<cr>
nnoremap tzx :! /Users/jab/src/git/hub/jab/bin/Under "a spreading chest tree"<cr>
"noremap u - undo
"noremap v - start visual
"noremap w - forword
"noremap x - remove char
"noremap y - yank
nnoremap yb byw
"z {{{4
" /map \zsz\([<][^ ]*\|[^ ]\)
"noremap z - folds. centering, ...
nnoremap z+ zO
nnoremap z= zo
nnoremap z- zc
nnoremap z_ zC
nnoremap zq zC
"noremap zQ zc
nnoremap zw zO
nnoremap zW zo
"noremap ze
"noremap zr
"noremap zt
"noremap zy
nnoremap za z<cr>
nnoremap zs jzck
"noremap zd
"noremap zf
"noremap zh
"noremap zj
"noremap zk
"noremap zl
nnoremap zx jzoz<cr>
nnoremap zX jzOz<cr>
nnoremap zn nzMzvzz
nnoremap zN NzMzvzz
nnoremap z/ /<cr>zMzvzz
nnoremap z? ?<cr>zMzvzz
nnoremap z<up> zM
nnoremap z<right> zczoz<cr>
nnoremap z<left> zm
nnoremap z<down> zR
" Punctuation {{{3
nnoremap ] <C-]>
nnoremap [ <C-T>
nnoremap ; q:
nnoremap ' bp
nnoremap " m'
"noremap \ - leader
nnoremap , .n
"noremap . - repeat
"noremap / - search
"noremap / - search
"noremap `
" Shifted punctuation {{{3
"noremap {
"noremap }
"noremap : - command line
nnoremap " bn
"noremap "
"noremap |
"noremap < -
"noremap > -
"noremap ? -
"noremap ~ -
"noremap !
nnoremap @ :w !sudo tee % >/dev/null<cr>
"noremap L
nnoremap M `m
"noremap $ -
"noremap %
"noremap ^
"noremap &
"noremap * -
"noremap (
"noremap )
"noremap _
"noremap +
" LETTERS {{{3
"noremap A - Append to line
nnoremap B :vsplit
"noremap C
nnoremap E :wa!<cr>:qa!<cr>
nnoremap F :w! ~/fred
"noremap G goto line (default last)
nnoremap H gT
"noremap I insert at start of line
nnoremap J <PageDown>zz
nnoremap K <PageUp>zz
nnoremap L gt
nnoremap M :cn<cr>zMzvzz
nnoremap N :cn<cr>zMzvzz
"noremap O - Open line above
"noremap P - paste forward
nnoremap Q :qa!<CR>
"noremap R - Replace
nnoremap S G:%s,,,<Left><Left>
nnoremap T :!tags
nnoremap U :redo<cr>
"noremap V - linewise visual
nnoremap W :wa!<cr>
nnoremap X :wa!<cr>:qa!<cr>
"noremap Y - aka yy
nnoremap Z XC
" ordinary keys for movement {{{2
nnoremap <Space><Space>  <PageDown>zz
nnoremap t<left>  gT
nnoremap t<right> gt
nnoremap th       gT
nnoremap tl       gt
"
" Normal Arrows
"
nnoremap <up>               ?<cr>zv
nnoremap <down>             /<cr>zv
nnoremap <left>             #zv
nnoremap <right>            *zv
"
" Shift Normal Arrows
"
nnoremap <S-up>             ?
nnoremap <S-down>           /
nnoremap <S-left>           :tabprev<cr>
nnoremap <S-right>          :tabnext<cr>
"
" Control Normal Arrows
"
nnoremap <c-k>              window up
nnoremap <c-j>              does nothing ?
nnoremap <c-h>              prev desktop
nnoremap <c-l>              next desktop
"
" Not Arrows
"
nnoremap <PageUp>           <C-B>
nnoremap <PageDown>         <C-F>

" Other Control Keys {{{2
nnoremap    <C-d> :qa<CR>
nnoremap    <C-n> :next<CR>
nnoremap    <C-p> :prev<CR>
nnoremap    <C-q> :qa!<CR>
nnoremap    <C-h> <c-w><c-h>
nnoremap    <C-j> <c-w><c-j>
nnoremap    <C-k> <c-w><c-k>
nnoremap    <C-l> <c-w><c-l>
     map    <C-b> dndndndd/<cr>
     map    <C-m> dd/<cr>dndd/<cr>
     map    <C-n> dndd/<cr>dd/<cr>
inoremap    <C-d> <esc>:qa<CR>
inoremap    <C-q> <Esc>:qa!<CR>
" Alt keys {{{2
nnoremap    <A-q>      :qa!<CR>
inoremap    <A-q> <Esc>:qa!<CR>
inoremap <A-Right> <Esc>:tabnext<CR>
inoremap <A-Left> <Esc>:tabprev<CR>
" Leader keys {{{2
"noremap <leader>"
nnoremap <leader>' :call Unsearch()<cr><c-l>
"noremap <leader>(
"noremap <leader>)
"noremap <leader>/
"noremap <leader>,
"noremap <leader>.
"noremap <leader>
"noremap <leader>9
"noremap <leader>?
"noremap <leader><
"noremap <leader>>
nnoremap <leader>: :wa<cr>
nnoremap <leader>; :w<cr>
nnoremap <leader>P :wa<cr>qa<cr>
" Next one is from http://vi.stackexchange.com/a/479/182
nnoremap <leader>W :w !sudo tee % >/dev/null<cr>L<cr>
nnoremap <leader>[ :cn<cr>zMzvzz
nnoremap <leader>] :cp<cr>zMzvzz

nnoremap <leader>1 :w! ~/one<cr>
nnoremap <leader>2 :w! ~/two<cr>
nnoremap <leader>3 :w! ~/three<cr>
nnoremap <leader>0 /xxx<cr>

nnoremap <leader>a :call SetAbsoluteNumber()<cr>
"noremap <leader>b used by plugin/EasyMotion.vim
"noremap <leader>c used by ftplugin/python/jab
"noremap <leader>d used by ftplugin/python/jab
"noremap <leader>e used by plugin/EasyMotion.vim
"noremap <leader>f used by plugin/EasyMotion.vim
nnoremap <leader>g :GitGutterToggle<cr>
nnoremap <leader>h :call AfterPressing("h")<CR>
nnoremap <leader>l :call AfterPressing("l")<CR>
nnoremap <leader>i mm:w!<cr>:source $MYVIMRC<cr>`m
"noremap <leader>j used by plugin/EasyMotion.vim
"noremap <leader>k used by plugin/EasyMotion.vim
nnoremap <leader>M gg/^\(\(<\{2,}\)\\|\(=\{2,}\)\\|\(\|\{2,}\)\\|\(>\{2,}\)\)<cr>z<cr>
nnoremap <leader>m /^\(\(<\{2,}\)\\|\(=\{2,}\)\\|\(\|\{2,}\)\\|\(>\{2,}\)\)<cr>z<cr>
nnoremap <leader>n :call ToggleNumber()<cr>
"noremap <leader>o
nnoremap <leader>p :set paste<cr>
"noremap <leader>q
nnoremap <leader>r :set wrap!<cr>
"noremap <leader>s
nnoremap <leader>t :call RetabAndStripTrailingWhitespace()<CR>
nnoremap <leader>u :GundoToggle<CR>
nnoremap <leader>v mvO<c-r>. = <c-r>"<esc>`v
nnoremap <leader>w :wq<cr>
nnoremap <leader>x :call RangerExplorer()<cr>
"noremap <leader>y
"noremap <leader>z

"noremap <leader>{
"noremap <leader>| don't do this
"noremap <leader>}

nnoremap <leader><Left>     <<
nnoremap <leader><Right>    >>
" Kinda keys {{{2
set backspace=eol,start,indent
set autoindent smartindent
set matchpairs+=<:>
set listchars=tab:>-,trail:?,eol:$
set tildeop
set whichwrap+=<,>,h,l,[,] " http://vim.wikia.com/wiki/Automatically_wrap_left_and_right
" Suggested by ZeroKelvinKeyboard (which must hurt ?!) http://stackoverflow.com/a/26235811/500942
set mouse=
" Mouse works: set mouse=
" Screen {{{1
" Settings {{{2
set background=dark     " My colorscheme works best on a dark background
colorscheme jalanb " I have my own colorscheme (usually at ~/.vim/colors/jalanb.vim
set title           " the title of the window will be set to filename being edited
set showmode        " If in Insert, Replace or Visual mode put a message on the last line.
set showcmd         " Show (partial) command in the last line of the screen.
set showmatch       " Show matching brackets.
set nowrap          " Do not wrap lines (initially)
set tabstop=4       " number of visual spaces per TAB
set softtabstop=4   " number of spaces in tab when editing
set shiftwidth=4    " Number of spaces to use for each step of (auto)indent.
set expandtab       " tabs are expanded to spaces
set smarttab        " When on, a <Tab> in front of a line inserts blanks according to 'shiftwidth'.
set tabpagemax=1000 " Maximum number of tab pages to be opened by the -p command line argument
                    " I set it very high as I use -p by default
set nospell         " Turn off spell checking
set t_Co=256
" Back in the day I used to use the SeeTab plugin
" let g:SeeTabGuiFG="Cyan"
" See http://www.vim.org/scripts/script.php?script_id=628 for more
" Terminal {{{2
" Enable screen swapping {{{3
" which seems missing in the linux terminfo entry
" help xterm-screens for more info
if &term ==? 'linux'
    set t_ti=[?1049h
    set t_te=[?1049l
endif
" Colours {{{3
" Cursor shapes differing in different modes {{{3
" from http://www.reddit.com/user/Eyckelboom
" " set a nicer cursor in insert mode (from terryma on github)
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" Plugins {{{1
" Pathogen {{{2
" Pathogen helps install other vim scipts, see http://github.com/tpope/vim-pathogen
" And it must be set up before the plugin on command (next)
execute pathogen#infect()
call pathogen#helptags()
filetype on
filetype plugin on
filetype indent on  " load filetype-specific indent files
"EasyMotion {{{2
let g:EasyMotion_keys = ' abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'
let g:EasyMotion_leader_key = '<Space>'
" Tagging plugins {{{2
let g:easytags_auto_highlight = 0
" pylint {{{2
let g:pylint_show_rate = 0
" Limelight {{{2
let g:limelight_default_coefficient = 0.7
" YouCompleteMe {{{2
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
" gitgutter {{{2
" Faster updates (See the readme at https://github.com/airblade/vim-gitgutter)
set updatetime=500
" Splice {{{2
let g:splice_initial_scrollbind_grid=1
" Functions {{{1
" vimdiff, aka vim -d {{{2
function EnterBuffer ()
    "
    " diff options
    "
    if &diff
        noremap <buffer> o :diffget<cr>
        noremap <buffer> p :diffput<cr>
        noremap <buffer> ] ]czz
        noremap <buffer> [ [czz
        syntax off
        set diffopt=filler  ",iwhite
        function! DiffNoSpace()
            set diffopt=filler,iwhite
        endfunction
        function! DiffSpace()
            set diffopt=filler
        endfunction
    else
        " noremap ] <C-]>
        " noremap [ <C-T>
        syntax on
    endif
    let &titlestring = $HOSTNAME . ':vim ' . expand('%:p:~')
endfunction

function! LeaveBuffer ()
    let &titlestring = $HOSTNAME . ':not ' . expand('%:p:~')
endfunction

autocmd BufEnter * call EnterBuffer()
autocmd BufLeave * call LeaveBuffer()

function HereIs(sentinel_line, sentinel_col)
    return line('.') == a:sentinel_line && col('.') == a:sentinel_col
endfunction

function AtStart()
    return HereIs(1, 1)
endfunction

function AtEnd()
    return HereIs(line('$'), col('$') - 1)
endfunction

function OnStart()
    return line('.') == 1
endfunction

function OnEnd()
    return line('.') == line('$')
endfunction

function AtEnds()
    return AtStart() || AtEnd()
endfunction

function OnEnds()
    return OnStart() || OnEnd()
endfunction

function CheckHere()
    if AtEnd()
        echo "At End"
    else
        echo "Not End"
    endif
    if AtStart()
        echo "At Start"
    else
        echo "Not Start"
    endif
endfunction

"
" 'ttimeoutlen' is the time in milliseconds that is waited for a key code or mapped key sequence to complete.
" :set ttm=200
"
function AfterPressing(pressed_key) abort
    echo 'AfterPressing('. a:pressed_key . ')'
    if ! OnEnds()
        echo "Try gg or G first"
        return
    elseif OnStart() && ! AtStart() && a:pressed_key == 'h'
        echo "Try 0 first"
        return
    elseif OnEnd() && ! AtEnd() && a:pressed_key == 'l'
        echo "Try $ first"
        return
    endif
    let time_out = &ttimeoutlen
    let start_time = reltime()
    let time_left = time_out
    let indent = 2
    let i = 1
    while reltimefloat(reltime(start_time)) < time_out
        let user_nr = getchar(0)
        if user_nr == 0
            let hide = i % indent
            if ! hide
                echo i
                let indent *= 2
            endif
            let i += 1
            continue
        endif
        let user_key = nr2char(user_nr)
        echo "user_key = " . user_key . ".\n"
        echo "if '" . user_key . "' == a:pressed_key('" . a:pressed_key . "')"
        if user_key == a:pressed_key
            echo "double " . a:pressed_key
            ", switch buffers"
            " call feedkeys(a:pressed_key == 'h' ? ":bp\<CR>" : ":bn\<CR>", 't')
        else
            echo "else " . user_key
            " Switch tabs and replay what they typed"
            " call feedkeys((a:pressed_key == 'h' ? 'gT' : 'gt') . user_key, 't')
        endif
        return
    endwhile
    echo " The user didn't press anything"
    call CheckHere()
    ". Switch Tabs"
    " call feedkeys((a:pressed_key == 'h' ? 'gT' : 'gt'), 't')
endfunction

"   The timeout only happens when the 'timeout' and 'ttimeout' options
"   tell so.  A useful setting would be
"           :set timeout timeoutlen=3000 ttimeoutlen=100

set timeout timeoutlen=3000 ttimeoutlen=100

" diff to when I started editting
if !exists(':DiffOrig')
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
endif
" Miscellaneous {{{1
" Abbreviations {{{3
" Ok, ok, so I have some spelling blind-spots {{{3
abbreviate becuase because
abbreviate lamda lambda
abbreviate seperate separate
cnoreabbrev H vert bo help
" Some miscellaneous stuff from around the interwebs
" Filetype {{{2
autocmd FileType c,cpp,h,java set cindent
"  Configuring Vim right {{{2
" From http://items.sjbach.com/319/configuring-vim-right
set hidden      " When on a buffer becomes hidden when it is abandoned.
set scrolloff=9 " Minimal number of screen lines to keep above and below the cursor.
set ruler
set shortmess=atI
set visualbell
" Assortment {{{2
" http://www.pixelbeat.org/settings/.vimrc
set nojoinspaces    " Do not insert two spaces after a '.', '?' and '!' with a join command.
set cursorline      " Highlight the screen line of the cursor with CursorLine
set wildmenu        " visual autocomplete for command menu
set wildmode=list:longest,full " See http://vi.stackexchange.com/questions/656/bash-like-partial-tab-complete-for-filenames-in-vim
set completeopt=menu,preview,longest
" Ignorance {{{2
"Ignore these files when completing names and in Explorer
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,*.py[co]
" Do not backup temps {{{2
" From http://tim.theenchanter.com/2008/07/crontab-temp-file-must-be-edited-in.html
"   When one of the patterns matches with the name of the file which is written, no backup file is created.
set backupskip=/tmp/*,/private/tmp/*,~/tmp
" Stronger encryption {{{2
if exists('+cm')
    set cm=blowfish
endif
autocmd BufReadPost * if &key != "" | set noswapfile nowritebackup viminfo= nobackup noshelltemp history=0 secure | endif

" From vim help {{{2
set backupdir=~/old
" Add a date to backup file extension
:au BufWritePre * let &bex = '-' . strftime('%F.%T') . '~'

" Unset an option which babun (?) has set {{{2
set noundofile

" Despacing {{{2
function! RetabAndStripTrailingWhitespace()
    :retab!
    :%s/\s\+$//e
endfunction

" Showing numbers in left-hand gutter {{{2
function! SetRelativeNumber() " {{{3
    if exists('&relativenumber') && (&relativenumber == 0)
        set relativenumber
    endif
endfunction

function! SetAbsoluteNumber() " {{{3
    set number
endfunction

function! ChangeNumber() " {{{3
    if exists('&relativenumber')
        call CycleNumber()
    else
        call ToggleNumber()
    endif
endfunction

" <leader>n is bound (above) to ToggleNumber()
"
function! ToggleNumber() " {{{3
    if &number == 1
        set nonumber
    else
        set nonumber
        if &relativenumber == 1
            set norelativenumber
        else
            set relativenumber
        endif
    endif
endfunction
set number    " Start with line numbers
" Search {{{2
" Today's tip is from /u/dddbbb at http://www.reddit.com/r/vim/comments/2h5xce/vim_greplikes/ckpsxci
:set grepprg=grep\ -nH
function Unsearch()
    set nohlsearch
    normal /,,,<cr>
    if &hlsearch
        set hlsearch
    endif
endfunction

" set some tings {{{3
set noignorecase      " Ignore Case while searching (\C in the regexp to search casefully)
set nosmartcase       " Do not ignorecase if the regexp includes capitals
set incsearch       " search as characters are entered
set hlsearch        " highlight matches
" seek.vim is a plugin for 'in current line' searching {{{3
let g:SeekKey = 'f'
let g:SeekBackKey = 'F'
" This looks like one of mine
function! ReadTraceback(filename)
    :set efm=%E\ \ File\ \"%f\"\\,\ line\ %l%.%#,%C\ \ \ \ %m,%Z
    :map <F11> :cn<cr>zMzvzz
    :map <F10> :cp<cr>zMzvzz
    exec 'cf ' . a:filename
    exec 'clast'
    normal zv
endfunction
" History {{{2
set history=1000
set viminfo=/100,'10,r/mnt/zip,r/mnt/floppy,f0,h,\"100,n~/.viminfo
" Make Vim jump to the last position when reopening a file
    if has('autocmd')
      au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
    endif

" for filename completion (with Tab) {{{2
let g:explHideFiles='^\.[^\.],\.gz$,\.exe$,\.zip$,\.py.$,\~$'
let g:explVertical=1
let g:explWinSize=1
let g:explSplitRight=1
let g:explDetailedList=1
let g:explSortBy='date'

let g:netrw_altv = 1
let g:netrw_browse_split = 2
let g:netrw_list_hide='^\.[^\.],\.gz\([^\i]\|$\),\.exe\([^\i]\|$\),\.zip\([^\i]\|$\),\.py[oce],\~\([^\i]\|$\)'
let g:netrw_keepdir=0
let g:netrw_banner = 0

let g:jabHideFiles='^\.[^\.],\.gz$,\.exe$,\.zip$,\.py.$,\~$'
let g:jabVertical=1
let g:jabWinSize=1
let g:jabSplitRight=1
let g:jabDetailedList=1
let g:jabSortBy='date'

let g:is_posix = 1

" Use ranger as a file explorer {{2
" From http://www.everythingcli.org/use-ranger-as-a-file-explorer-in-vim/
function RangerExplorer()
    exec 'silent !ranger --choosefile=/tmp/vim_ranger_current_file ' . expand('%:p:h')
    if filereadable('/tmp/vim_ranger_current_file')
        exec 'edit ' . system('cat /tmp/vim_ranger_current_file')
        call system('rm /tmp/vim_ranger_current_file')
    endif
    redraw!
endfun

" Honour those wee lines at eof {{{2
set modeline
set modelines=1

let g:ycm_server_keep_logfiles=1

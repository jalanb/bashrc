#! /bin/bash

# sst - run ssh from a terminal, and set titles to and from


PATH_TO_SCRIPT=$(readlink -f $BASH_SOURCE)

. ~/hub/whyp/whyp.sh
. ~/jab/environ.d/jab.sh
. ~/jab/src/bash/functons.sh

usage () {
    if [[ $# < 2 ]]; then
        if [[ $# == 1 ]]; then
            local _parts=$(echo $1 | tr '@' '\n' | wc -l)
            if [[ $_parts -gt 2 ]]; then
                echo "usage: $PATH_TO_SCRIPT <username> <server>" >&2
                exit 1
            fi
        fi
    fi
}

main () {
    local _parts=$(echo $1 | tr '@' '\n' | wc -l)
    local _remote_user=
    local _remote_server=
    if [[ $_parts == 1 ]]; then
        _remote_server="$1"
        shift
    elif [[ $_parts == 2 ]]; then
        _remote_user=$(echo $1 | cut -d\@ -f 1)
        _remote_server=$(echo $1 | cut -d\@ -f 2)
        shift
    else
        _remote_user=$1
        _remote_server=$2
        shift 2
    fi
    local _args="$@"

    local _local_user=$USER
    [[ -n $_local_user ]] || return 1
    local _known_user=
    if [[ -n $_remote_user ]]; then
        _known_user=$(ssh -G ${_remote_user}@${_remote_server} | grep -w user | sed -e "s:user ::")
    else
        _known_user=$(ssh -G ${_local_user}@${_remote_server} | grep -w user | sed -e "s:user ::")
        [[ -n $_known_user ]] && _remote_user=$_known_user 
    fi
    local _local_server=`hostname -s`
    [[ -n $_local_server ]] || return 1
    local _local_ip=$(local_ip)
    [[ -n $_local_ip ]] || return 1
    local _remote_ip=
    [[ -n $_remote_server ]] || return 1
    _remote_ip=$(python -c "import socket; print socket.gethostbyname('$_remote_server')" 2> ~/fd2; true)
    if [[ $_local_ip == $_remote_ip ]]; then
        if [[ $_remote_user == $(whoami) ]]; then
            echo "Here I am: $_remote_user@$_remote_server ($_remote_ip)" 2>&1
        else
            echo "Here we are: \"$_local_server\" / \"$_remote_server\" ($_remote_ip)" >&2
            echo '  Perhaps you meant to use "$ su -u '$_remote_user'"' >&2
        fi
        return
    fi
    if [[ $(ssh -G ${_remote_user}@${_remote_server} | grep identityfile) != 1 ]]; then
        echo "Unknown user: ${_remote_user}@${_remote_server}" >&2
        return 5
    fi
    local _identity_file=$(ssh -G ${_remote_user}@${_remote_server} | grep identityfile | sed -e "s:identityfile ::")
    if [[ -n $_identity_file ]]; then
        [[ $_args =~ -i ]] || _args="$_args -i $_identity_file"
    fi
    local there_small=${_remote_server/.$EMPLOYER_DOMAIN/}
    set -x
    console_title_on ${_remote_user}@${there_small} && \
        ssh -t -o ConnectTimeout=5 $_args $_remote_user@$_remote_server && \
        console_title_off ${_local_user}@${_local_server}
    set +x
}

usage "$@"
main "$@"
